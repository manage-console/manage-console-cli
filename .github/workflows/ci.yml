name: CI Workflow and NPM Publish

on:
  workflow_dispatch:  # للسماح بالتشغيل اليدوي
  push:
    branches:
      - main
    paths-ignore:
      - 'package.json'  # تجاهل التغييرات في ملف الإصدار
      - 'package-lock.json'

jobs:
  build-and-publish:
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GH_PAT }}

      # Step 2: Set up Node.js
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      # Step 3: Set up Git user
      - name: Set up Git user
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Step 4: Install dependencies
      - name: Install dependencies
        run: npm install

      # Step 5: Build the project
      - name: Build the project
        run: npm run build

      # Step 6: Update version and push
      - name: Check last commit and update version
        run: |
          if [[ "$(git log -1 --pretty=%B)" != *"[skip ci]"* ]]; then
            npm version patch
            git push --follow-tags -m "[skip ci]"
          else
            echo "Skipping version update as this was triggered by an automated commit"
          fi
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}

      # Step 7: Publish to NPM
      - name: Publish to NPM
        # فقط إذا كان هناك تغيير في الإصدار
        if: success() && steps.version-check.outcome == 'success'
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Step 8: Create GitHub Release
      - name: Create GitHub Release
        if: success() && steps.version-check.outcome == 'success'
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PAT }}
        run: |
          VERSION=$(npm pkg get version | tr -d '"')
          if gh release view $VERSION &>/dev/null; then
            echo "Release $VERSION already exists"
          else
            gh release create $VERSION \
              --title "Release $VERSION" \
              --notes "Release notes for version $VERSION"
          fi
